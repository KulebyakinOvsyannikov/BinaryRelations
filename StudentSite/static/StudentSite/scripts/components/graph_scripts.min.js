var graphHandle,graphContainer,graphElements=[];
function graphInitiate(a){graphElements=a;graphContainer=document.getElementById("graph_container");a=[];for(var b=0;b<graphElements.length;++b){var c={id:String(graphElements[b]),label:String(graphElements[b]),x:Math.sin(2*b*Math.PI/graphElements.length),y:Math.cos(2*b*Math.PI/graphElements.length),size:20};a.push(c)}graphHandle=new sigma({graph:{nodes:a,edges:[]},renderer:{container:graphContainer,type:"canvas"},settings:{doubleClickEnabled:!1,minArrowSize:10,enableEdgeHovering:!0,edgeHoverColor:"edge",
defaultEdgeHoverColor:"#000",edgeHoverSizeRatio:1,edgeHoverExtremities:!0,labelThreshold:0,touchEnabled:!1,mouseEnabled:!1,mouseWheelEnabled:!1,eventsEnabled:!1}});graphHandle.camera.goTo({ratio:1.25});matrixGraphHandle=graphRelationChanged}function graphAddRelation(a){a={id:a,source:graphElements[parseInt(a.substr(0,1))],target:graphElements[parseInt(a.substr(2,1))],type:a.substr(0,1)==a.substr(2,1)?"curve":"arrow"};try{graphHandle.graph.addEdge(a)}catch(b){console.log(b)}graphHandle.refresh()}
function graphRemoveRelation(a){try{graphHandle.graph.dropEdge(a),graphHandle.refresh()}catch(b){console.log(b)}}function graphRelationChangedTopological(a){switch(a.value){case "1":graphAddRelation(a.name);break;case "0":graphRemoveRelation(a.name)}}function graphRelationChanged(a){switch(a.value){case "1":graphAddRelation(a.name);break;case "0":graphRemoveRelation(a.name)}}
function graphFillFromString(a){a=a.split("$");for(var b=[],c=0;c<a.length;++c)for(var d=0;d<a[c].length;++d)"1"==a[c][d]&&b.push({id:String(c)+"-"+String(d),source:graphElements[c],target:graphElements[d],type:c==d?"curve":"arrow"})};
